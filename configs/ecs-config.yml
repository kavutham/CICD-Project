AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for creating a task definition"
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that you want the eccs cluster to run in
  ClusterName:
    Type: String
    Description: The name of the cluster to deploy to
  SubnetId:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select at least two subnets in your selected VPC.
  AppName:
    Type: String
    Description: Name of the first application containers
    Default: spring-app
Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref 'ClusterName'
  CloudwatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join 
        - '-'
        - - ECSLogGroup
          - !Ref 'AWS::StackName'
      RetentionInDays: 14
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: "arn:aws:iam::680032936053:role/ecsTaskExecutionRole"
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: !Ref 'AppName'
          Image: "680032936053.dkr.ecr.us-east-1.amazonaws.com/spring-app:latest"
          MemoryReservation: 256
          Memory: 512
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: spring-app-demo
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
  FargateAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: FargateAlb
      SecurityGroups:
        - !GetAtt FargateAlbSG.GroupId
      Subnets: !Ref 'SubnetId'
      Type: application
  MyFargateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: FargateAlb
    Properties:
      Name: MyFargateTargetGroup
      VpcId: !Ref 'VpcId'
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /ride
      TargetType: ip
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref MyFargateTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FargateAlb
      Port: 80
      Protocol: HTTP
  FargateAlbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: FargateAlbSG
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
  Alb2FargateSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for traffic between ALB and containers
      GroupName: Alb2FargateSG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt FargateAlbSG.GroupId
          Description: 'Inbound rule for all traffic'
  MyECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      LaunchType: FARGATE
      Cluster:
        Ref: "ECSCluster"
      ServiceName: !Ref 'AppName'
      DesiredCount: 1
      TaskDefinition:
        Ref: "MyTaskDefinition"
      LoadBalancers:
        - TargetGroupArn:
            Ref: MyFargateTargetGroup
          ContainerPort: 8080
          ContainerName: !Ref 'AppName'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt Alb2FargateSG.GroupId
          Subnets: !Ref 'SubnetId'
